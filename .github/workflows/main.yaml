name: CI/CD Pipeline for Python Flask App

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run simple Test
        run: |
          python -m unittest kraken_test.py
          echo "Tests passed successfully!"

      - name: Build and Push Docker Image
        run: docker build . -t ${{ secrets.DOCKER_HUB_USER }}/kraken:latest
        # run: docker build . -t ashishpandey2014/kraken:latest
      - name: Login to Docker Hub
        run: docker login -u ${{ secrets.DOCKER_HUB_USER }} -p ${{ secrets.DOCKER_HUB_TOKEN }}
        # run: docker login -u ashishpandey2014 -p ${{ secrets.DOCKER_HUB_TOKEN }}
      - name: push image
        run: docker push ${{ secrets.DOCKER_HUB_USER }}/kraken:latest
        # run: docker push ashishpandey2014/kraken:latest
  
  deploy:
    needs: build-and-test
    runs-on: self-hosted 

    steps:
      - name: Checkout Code (on self-hosted runner)
        uses: actions/checkout@v4
        
      - name: Login to Docker Hub
        run: docker login -u ${{ secrets.DOCKER_HUB_USER }} -p ${{ secrets.DOCKER_HUB_TOKEN }}
      
      - name: Deploy Docker Image to VM
        run: |
          echo "Starting deployment on local VM..."
          # Define your Docker image name
          IMAGE_NAME="${{ secrets.DOCKER_HUB_USER }}/kraken:latest"

          echo "Pulling latest Docker image: $IMAGE_NAME"
          docker pull $IMAGE_NAME

          echo "Stopping existing container (if any)..."
          # Stop and remove any old container gracefully
          # The '|| true' ensures the script doesn't fail if the container doesn't exist
          docker stop kraken || true
          docker rm kraken || true

          echo "Running new container..."
          # Run the new container, mapping VM port 80 to container port 5050
          # -d runs in detached mode (background)
          # --name gives it a memorable name
          # -p 80:5050 maps host port 80 to container port 5050
          # --env allows passing environment variables to the container (optional, but good practice)
          docker run -d \
            --name kraken \
            -p 80:5050 \
            -e GREETING_MESSAGE="Hello from DevOps CD!" \
            $IMAGE_NAME

          echo "Deployment successful! Check your VM's IP address."
          echo "Your app should now be accessible at http://<Your_VM_IP_Address>/"